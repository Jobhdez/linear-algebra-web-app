[{"/Users/lambdainsphere/seminar/frontend/src/index.js":"1","/Users/lambdainsphere/seminar/frontend/src/App.js":"2","/Users/lambdainsphere/seminar/frontend/src/components/LinearAlgebraChat.js":"3","/Users/lambdainsphere/seminar/frontend/src/components/Home.js":"4","/Users/lambdainsphere/seminar/frontend/src/components/LinearAlgebraCompute.js":"5","/Users/lambdainsphere/seminar/frontend/src/components/Header.js":"6","/Users/lambdainsphere/seminar/frontend/src/components/Footer.js":"7","/Users/lambdainsphere/seminar/frontend/src/components/ResearchPaperCard.js":"8","/Users/lambdainsphere/seminar/frontend/src/components/SearchedPapers.js":"9"},{"size":232,"mtime":1657563297509,"results":"10","hashOfConfig":"11"},{"size":795,"mtime":1657567874600,"results":"12","hashOfConfig":"11"},{"size":4450,"mtime":1657569189049,"results":"13","hashOfConfig":"11"},{"size":1509,"mtime":1657564825407,"results":"14","hashOfConfig":"11"},{"size":967,"mtime":1657575222310,"results":"15","hashOfConfig":"11"},{"size":1247,"mtime":1657568463340,"results":"16","hashOfConfig":"11"},{"size":90,"mtime":1657562908785,"results":"17","hashOfConfig":"11"},{"size":875,"mtime":1657564863609,"results":"18","hashOfConfig":"11"},{"size":1366,"mtime":1657573104968,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"d45dug",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"23"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/lambdainsphere/seminar/frontend/src/index.js",[],[],[],"/Users/lambdainsphere/seminar/frontend/src/App.js",[],[],"/Users/lambdainsphere/seminar/frontend/src/components/LinearAlgebraChat.js",["49"],[],"import React, { useState, useEffect} from 'react';\nimport { w3cwebsocket as WebSocket } from 'websocket';\nimport TextField from '@mui/material/TextField';\nimport Container from '@mui/material/Container';\nimport Paper from '@mui/material/Paper';\nimport Card from '@mui/material/Card';\nimport Button from '@mui/material/Button';\nimport Box from '@mui/material/Box';\nimport CardHeader from '@mui/material/CardHeader';\nimport Typography from '@mui/material/Typography';\n\n\n\n\nfunction LinearAlgebraChat() {\n\n    const [login, setLogin] = useState(false);\n    const [messages, setMessages] = useState([]);\n    const [value, setValue] = useState('');\n    const [name, setName] = useState('');\n    const [room, setRoom] = useState('Linear-Algebra');\n\n    const client = new WebSocket('ws://127.0.0.1:8000/ws/chat/' + room + '/')\n    const onButtonClicked = (e) => {\n        client.c.send(JSON.stringify({\n            type: \"message\",\n            message: value,\n            name: name\n        }));\n        setValue('')\n        e.preventDefault();\n\n    }\n   \n    useEffect(() => {\n        client.onmessage = (message) => {\n            const dataFromServer = JSON.parse(message.data);\n            setMessages(() => [...messages, {\n                msg: dataFromServer.message,\n                name: dataFromServer.name,}])\n        }\n    }, [client, messages],);\n\n    console.log(messages);\n    return(\n        <Container component=\"main\" maxWidth=\"xs\">\n            {login ? \n              <div style={{marginTop: 50,}}>\n                  Room Name: {room}\n                  <Paper style={{height: 500, maxHeight: 500, overflow: 'auto', boxShadow: 'none',}}>\n                      {messages.map(message => <>\n                         <Card>\n                             <CardHeader title={message.name}\n                                         subheader={message.msg}\n                                         />\n                         </Card>\n                      </>)}\n                  </Paper>\n                  \n                      <TextField\n                         id=\"outlined-helperText\"\n                         label=\"Make a comment\"\n                         variant=\"outlined\"\n                         value={value}\n                         fullWidth\n                         onChange={e => {\n                             setValue(e.target.value)\n                             \n                         }}\n                         />\n                         <Button \n                           type=\"submit\"\n                           fullWidth\n                           variant=\"contained\"\n                           color=\"primary\"\n                           onClick={onButtonClicked}\n                           >\n                               Start Chatting\n                           </Button>\n                           \n                \n              </div>\n              :\n              <Box \n           component=\"form\"\n           sx={{\n               '& .MuiTextField-root': {m: 1, width: '25ch'},\n           }}\n           noValidate\n           autoComplete=\"off\"\n           >\n               <div>\n                   <Typography component=\"h1\" variant=\"h5\">\n                       Meaningful Chat\n                   </Typography>\n                  \n                   <TextField\n                     required\n                     id=\"email\"\n                     label=\"Chatroom\"\n                     value={room}\n                     onChange={e => {\n                         setRoom(e.target.value);\n                         \n                     }}\n                     />\n                     <TextField\n                       required\n                       id=\"username\"\n                       label=\"username\"\n                       value={name}\n                       onChange={e => {\n                           setName(e.target.value)\n                           \n                       }}\n                       />\n                       <Button \n                           type=\"submit\"\n                           fullWidth\n                           variant=\"contained\"\n                           color=\"primary\"\n                           onClick={() => setLogin(true)}\n                           >\n                               Start Chatting\n                           </Button>\n               </div>\n           </Box>}\n           \n              \n        </Container>\n         \n    );\n}\n\nexport default LinearAlgebraChat;","/Users/lambdainsphere/seminar/frontend/src/components/Home.js",[],[],"/Users/lambdainsphere/seminar/frontend/src/components/LinearAlgebraCompute.js",[],[],"/Users/lambdainsphere/seminar/frontend/src/components/Header.js",[],[],"/Users/lambdainsphere/seminar/frontend/src/components/Footer.js",[],[],"/Users/lambdainsphere/seminar/frontend/src/components/ResearchPaperCard.js",[],[],"/Users/lambdainsphere/seminar/frontend/src/components/SearchedPapers.js",[],[],{"ruleId":"50","severity":1,"message":"51","line":23,"column":11,"nodeType":"52","endLine":23,"endColumn":78},"react-hooks/exhaustive-deps","The 'client' object construction makes the dependencies of useEffect Hook (at line 42) change on every render. To fix this, wrap the initialization of 'client' in its own useMemo() Hook.","VariableDeclarator"]